
* Chapter 2 Notes and exercise solutions. 2.1 - 2.97





** Example 2.1
#+begin_src racket :lang sicp
    (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
		   (* (numer y) (denom x)))
		(* (denom x) (denom y))))

		  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
		   (* (numer y) (denom x)))
		(* (denom x) (denom y))))

		(define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
    (* (denom x) (denom y)))) (define (div-rat x y)
      (make-rat (* (numer x) (denom y))
		(* (denom x) (numer y))))

		  (define (equal-rat? x y)
  (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
#+end_src


#+RESULTS:
: /Applications/Racketv8.10/share/pkgs/r5rs-lib/r5rs/main.rkt:326:26: r5rs:body: no expression in body
:   in: (r5rs:body (define (add-rat x y) (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y)))) (define (sub-rat x y) (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y)))) (define (mul-rat x y) ...
:   location...:
:    /Applications/Racketv8.10/share/pkgs/r5rs-lib/r5rs/main.rkt:326:26
:   context...:
:    /Applications/Racketv8.10/share/pkgs/r5rs-lib/r5rs/main.rkt:336:2


#+begin_src racket :prologue "#lang racket/base\n(require threading)"

(~> 1 add1 sqrt)
#+end_src

#+RESULTS:
: 1.4142135623730951

#+begin_src racket :prologue "#lang racket/base\n(require threading)"
   (~>
  1
  (+ 1)
  (* 3)
  )

#+end_src

#+RESULTS:
: 6


Make latex bigger
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

* SICP

* Chapter 1
** Problem 1.3
Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.


Racket code using threading and sort

#+begin_src racket :prologue "#lang racket/base\n(require threading)"
     (define (foo x y z)
       (~>
	(list x y z)
	(sort <)
	(list-tail 1)
	(map (lambda (x) (* x x)) _)
	(foldl + 0 _)
	)
       )

    (foo 2 3 1)

#+end_src

#+RESULTS:
: 13

