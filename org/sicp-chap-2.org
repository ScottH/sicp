
* Chapter 2 Notes and exercise solutions. 2.1 - 2.97

** Section 2.1


Here's a dotted pair. Two items that are in a list structure, but not a list
#+begin_src racket :lang sicp
  (define x (cons 1 2))
  (display "x is ")(display  x) (newline)
  (display "car x is ")(display  (car x)) (newline)
  (display "cdr x is ")(display  (cdr x)) (newline)

#+end_src

#+RESULTS:
: x is (1 . 2)
: car x is 1
: cdr x is 2
: #<void>

The rational number code from section 2.1

#+name: rational-defs
#+begin_src racket :lang sicp :results output
   (define (make-rat n d) (cons n d))
   (define (numer x) (car x))
   (define (denom x) (cdr x))

   (define (add-rat x y)
     (make-rat (+ (* (numer x) (denom y))
		  (* (numer y) (denom x)))
	       (* (denom x) (denom y))))

   (define (sub-rat x y)
     (make-rat (- (* (numer x) (denom y))
		  (* (numer y) (denom x)))
	       (* (denom x) (denom y))))

   (define (mul-rat x y)
     (make-rat (* (numer x) (numer y))
	       (* (denom x) (denom y))))

   (define (div-rat x y)
     (make-rat (* (numer x) (denom y))
	       (* (denom x) (numer y))))

   (define (equal-rat? x y)
     (= (* (numer x) (denom y))
	(* (numer y) (denom x))))


   (define (print-rat x)
     (newline)
     (display (numer x))
     (display "/")
     (display (denom x))
     (newline))
#+end_src

#+RESULTS: rational-defs

#+begin_src racket :lang sicp :noweb eval
  <<rational-defs>>
  (print-rat (add-rat (make-rat 1 4) (make-rat 3 4)))
#+end_src

#+RESULTS:
: 
: 16/16
: #<void>


